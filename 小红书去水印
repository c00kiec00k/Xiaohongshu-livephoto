#import <UIKit/UIKit.h>

@interface FloatingButton : UIButton
@property (nonatomic, assign) CGPoint lastLocation;
@end

static FloatingButton *floatingBtn = nil;

@interface XYTabBar : UIView
@property (nonatomic, copy) NSArray *tabs;
@end

@interface XYPHMediaSaveConfig : NSObject
- (void)setDisableWatermark:(_Bool)arg1;
- (void)setDisableSave:(_Bool)arg1;
@end

@implementation FloatingButton

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    UITouch *touch = [touches anyObject];
    self.lastLocation = [touch locationInView:self.superview];
    [super touchesBegan:touches withEvent:event];
}

- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    UITouch *touch = [touches anyObject];
    CGPoint location = [touch locationInView:self.superview];
    
    CGFloat deltaX = location.x - self.lastLocation.x;
    CGFloat deltaY = location.y - self.lastLocation.y;
    
    self.center = CGPointMake(self.center.x + deltaX, self.center.y + deltaY);
    self.lastLocation = location;
}

@end

// ËÆæÁΩÆÈù¢Êùø
@interface SettingsPanel : UIView <UITableViewDelegate, UITableViewDataSource>
@property (nonatomic, strong) UITableView *tableView;
@property (nonatomic, copy) NSArray *options;
@end

@implementation SettingsPanel

- (instancetype)init {
    if (self = [super init]) {
        self.backgroundColor = [UIColor whiteColor];
        self.layer.cornerRadius = 15;
        self.layer.masksToBounds = YES;
        
        self.frame = CGRectMake(0, 0, 300, 400);
        
        UIWindow *currentWindow = nil;
        if (@available(iOS 13.0, *)) {
            UIWindowScene *windowScene = (UIWindowScene *)[UIApplication.sharedApplication.connectedScenes.allObjects firstObject];
            currentWindow = windowScene.windows.firstObject;
        } else {
            currentWindow = UIApplication.sharedApplication.windows.firstObject;
        }
        self.center = currentWindow.center;
        
        [self setupUI];
        [self setupOptions];
    }
    return self;
}

- (void)setupUI {
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(15, 10, 200, 20)];
    titleLabel.text = @"@c00kiec00k";
    titleLabel.textColor = [UIColor grayColor];
    titleLabel.font = [UIFont systemFontOfSize:10];
    [self addSubview:titleLabel];
    
    UIButton *closeButton = [UIButton buttonWithType:UIButtonTypeCustom];
    closeButton.frame = CGRectMake(self.frame.size.width - 40, 10, 30, 30);
    [closeButton setTitle:@"x" forState:UIControlStateNormal];
    [closeButton setTitleColor:[UIColor redColor] forState:UIControlStateNormal];
    closeButton.titleLabel.font = [UIFont systemFontOfSize:12];
    [closeButton addTarget:self action:@selector(close) forControlEvents:UIControlEventTouchUpInside];
    [self addSubview:closeButton];
    
    self.tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 50, self.frame.size.width, self.frame.size.height - 100) style:UITableViewStylePlain];
    self.tableView.delegate = self;
    self.tableView.dataSource = self;
    self.tableView.scrollEnabled = YES;
    self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    [self addSubview:self.tableView];
    
    UILabel *bottomLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, self.frame.size.height - 40, self.frame.size.width, 30)];
    bottomLabel.numberOfLines = 2;
    bottomLabel.textAlignment = NSTextAlignmentCenter;
    bottomLabel.textColor = [UIColor lightGrayColor];
    bottomLabel.font = [UIFont systemFontOfSize:8];
    bottomLabel.text = @"ùóóùó≤ùòÉùó≤ùóπùóºùóΩùó≤ùó± ùóØùòÜ @Áª¥‰ªñÂÖ•ÊàëÂøÉ\nùó†ùóºùó±ùó∂ùó≥ùó∂ùó≤ùó± ùóØùòÜ @ùó∞ùü¨ùü¨ùó∏ùó∂ùó≤ùó∞ùü¨ùü¨ùó∏";
    [self addSubview:bottomLabel];
}

- (void)setupOptions {
    self.options = @[
        @{@"title": @"ÂéªÈô§Â∫ïÊ†èË¥≠Áâ©", @"key": @"remove_tab_shopping"},
        @{@"title": @"ÂéªÈô§Â∫ïÊ†èÂä†Âè∑", @"key": @"remove_tab_post"},
        @{@"title": @"ÂéªÈô§ÊâÄÊúâÊ∞¥Âç∞", @"key": @"remove_save_watermark"},
        @{@"title": @"Âº∫Âà∂‰øùÂ≠òÂ™í‰Ωì", @"key": @"force_save_media"}
    ];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return self.options.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellId = @"Cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellId];
    
    if (!cell) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellId];
        cell.textLabel.textAlignment = NSTextAlignmentCenter;
        cell.textLabel.textColor = [UIColor grayColor];
        cell.textLabel.font = [UIFont systemFontOfSize:12];
        
        UISwitch *switchView = [[UISwitch alloc] init];
        [switchView addTarget:self action:@selector(switchChanged:) forControlEvents:UIControlEventValueChanged];
        cell.accessoryView = switchView;
    }
    
    NSDictionary *option = self.options[indexPath.row];
    cell.textLabel.text = option[@"title"];
    ((UISwitch *)cell.accessoryView).on = [[NSUserDefaults standardUserDefaults] boolForKey:option[@"key"]];
    
    return cell;
}

- (void)switchChanged:(UISwitch *)sender {
    UITableViewCell *cell = (UITableViewCell *)sender.superview.superview;
    NSIndexPath *indexPath = [self.tableView indexPathForCell:cell];
    NSDictionary *option = self.options[indexPath.row];
    
    [[NSUserDefaults standardUserDefaults] setBool:sender.isOn forKey:option[@"key"]];
    [[NSUserDefaults standardUserDefaults] synchronize];
}

- (void)close {
    [self removeFromSuperview];
}

@end

%hook XYTabBar

- (void)layoutSubviews {
    %orig;
    
    if (self.subviews.count >= 3) {
        BOOL removeShoppingTab = [[NSUserDefaults standardUserDefaults] boolForKey:@"remove_tab_shopping"];
        BOOL removePostTab = [[NSUserDefaults standardUserDefaults] boolForKey:@"remove_tab_post"];
        
        NSMutableArray *viewsToRemove = [NSMutableArray array];
        
        if (removeShoppingTab && removePostTab) {
            if (self.subviews.count > 1) {
                [viewsToRemove addObject:self.subviews[1]];
                if (self.subviews.count > 2) {
                    [viewsToRemove addObject:self.subviews[1]];
                }
            }
        } else {
            if (removeShoppingTab && self.subviews.count > 1) {
                [viewsToRemove addObject:self.subviews[1]];
            }
            if (removePostTab && self.subviews.count > 2) {
                NSInteger indexToRemove = removeShoppingTab ? 1 : 2;
                if (self.subviews.count > indexToRemove) {
                    [viewsToRemove addObject:self.subviews[indexToRemove]];
                }
            }
        }
        
        [viewsToRemove makeObjectsPerformSelector:@selector(removeFromSuperview)];
        
        CGFloat tabWidth = CGRectGetWidth(self.bounds) / self.subviews.count;
        [self.subviews enumerateObjectsUsingBlock:^(UIView *subview, NSUInteger idx, BOOL *stop) {
            CGRect frame = subview.frame;
            frame.origin.x = idx * tabWidth;
            frame.size.width = tabWidth;
            subview.frame = frame;
        }];
    }
}

%end

%hook XYPHMediaSaveConfig

- (void)setDisableWatermark:(_Bool)arg1 {
    BOOL removeWatermark = [[NSUserDefaults standardUserDefaults] boolForKey:@"remove_save_watermark"];
    %orig(removeWatermark);
}

- (void)setDisableSave:(_Bool)arg1 {
    BOOL forceSaveMedia = [[NSUserDefaults standardUserDefaults] boolForKey:@"force_save_media"];
    %orig(forceSaveMedia ? NO : arg1);
}

%end

%hook SpringBoard

- (void)applicationDidFinishLaunching:(id)application {
    %orig;
    
    dispatch_async(dispatch_get_main_queue(), ^{
        floatingBtn = [FloatingButton buttonWithType:UIButtonTypeCustom];
        floatingBtn.frame = CGRectMake(0, 0, 40, 40);
        
        UIWindow *currentWindow = nil;
        if (@available(iOS 13.0, *)) {
            UIWindowScene *windowScene = (UIWindowScene *)[UIApplication.sharedApplication.connectedScenes.allObjects firstObject];
            currentWindow = windowScene.windows.firstObject;
        } else {
            currentWindow = UIApplication.sharedApplication.windows.firstObject;
        }
        
        floatingBtn.center = CGPointMake(CGRectGetMidX(currentWindow.bounds), CGRectGetMidY(currentWindow.bounds));
        [floatingBtn setTitle:@"logo" forState:UIControlStateNormal];
        floatingBtn.backgroundColor = [UIColor colorWithWhite:0 alpha:0.7];
        floatingBtn.layer.cornerRadius = 20;
        
        UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(showSettings:)];
        [floatingBtn addGestureRecognizer:longPress];
        
        UITapGestureRecognizer *tripleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(toggleFloatingButton:)];
        tripleTap.numberOfTouchesRequired = 3;
        tripleTap.numberOfTapsRequired = 2;
        [currentWindow addGestureRecognizer:tripleTap];
        
        [currentWindow addSubview:floatingBtn];
    });
}

%new
- (void)showSettings:(UILongPressGestureRecognizer *)gesture {
    if (gesture.state == UIGestureRecognizerStateBegan) {
        UIWindow *currentWindow = nil;
        if (@available(iOS 13.0, *)) {
            UIWindowScene *windowScene = (UIWindowScene *)[UIApplication.sharedApplication.connectedScenes.allObjects firstObject];
            currentWindow = windowScene.windows.firstObject;
        } else {
            currentWindow = UIApplication.sharedApplication.windows.firstObject;
        }
        
        SettingsPanel *panel = [[SettingsPanel alloc] init];
        [currentWindow addSubview:panel];
    }
}

%new
- (void)toggleFloatingButton:(UITapGestureRecognizer *)gesture {
    if (floatingBtn) {
        floatingBtn.hidden = !floatingBtn.hidden;
    }
}

%end

%ctor {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    NSDictionary *defaultValues = @{
        @"remove_tab_shopping": @NO,
        @"remove_tab_post": @NO,
        @"remove_save_watermark": @NO,
        @"force_save_media": @NO
    };
    
    [defaultValues enumerateKeysAndObjectsUsingBlock:^(NSString *key, id obj, BOOL *stop) {
        if ([defaults objectForKey:key] == nil) {
            [defaults setBool:[obj boolValue] forKey:key];
        }
    }];
    [defaults synchronize];
}
